#!/usr/bin/python3

# LIBRARIES
from os import path, walk, listdir
from cryptography.fernet import Fernet
from sys import argv, exit
from pathlib import Path
from logging import basicConfig, DEBUG, debug, disable, CRITICAL

# Doing the basic configuration for the debugging feature
basicConfig(level=DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Disabling debugging. Hint: Comment out the line to enable debugging.
disable(CRITICAL)

# VARIABLES
# Creating a list of help options
helpOpts = ["--help", "-help", "-?", "-h"]
# Creating a list of encryption feature options
encOpts = ["-e", "--encrypt"]
# Creating a list of decryption feature options
decOpts = ["-d", "--decrypt"]
# Creating a list of recurise feature options
recurOpts = ["-r", "--recursive"]
# Creating a default recurise choice
recurChoice = False
# Creating list for the target folders' paths
listOfTargetFolPs = []
# Creating list for the target files' paths
listOfTargetFilPs = []
# Creating a help page by concatenating strings
helpTxt = f'\033[1m' + "NAME" + '\033[0m' + "\n\n\t" + 'obscuro - A command line encryption tool that can encrypt and decrypt files in the target path by rewriting the file\'s binary code.\n\n' + '\033[1m' + 'USAGE' + '\033[0m'+ "\n\n\t" + 'obscuro [OPTIONS] [PATH]' + "\n\n" + '\033[1m' + 'DESCRIPTION' + '\033[0m' +"\n\n\t" + "Encrypt and decrypt files by rewriting their binary code.\n\n\t" + f'{encOpts[0]}, {encOpts[1]} \n\t\tUse this option to encrypt a particular file or all the files in the target directory. Subdirectories are skipped.' + "\n\n\t" + f'{decOpts[0]}, {decOpts[1]}\n\t\t' + "Use this option to decrypt a particular file or all the files in the target directory. Subdirectories are skipped." + "\n\n\t" + f'{recurOpts[0]}, {recurOpts[1]}' + "\n\t\t" + f'Use this option to encrypt and decrypt files recursively.' + "\n\n" + '\033[1m' + 'EXAMPLES' + '\033[0m' + "\n\t" + f'obscuro {encOpts[0]} <target_path>' + "\n\t" + f'obscuro {decOpts[0]} <key_path> <target_path>' + "\n\t" + f'obscuro {recurOpts[0]} {encOpts[0]} <target_path>' + "\n\t" + f'obscuro {decOpts[0]} {encOpts[0]} <key_path> <target_path>' + "\n\t"

# FUNCTIONS
def main():
    """The function which runs the entire program"""
    # Checking if the second argument is a help option.
    if argv[1].lower().strip() in helpOpts:
        # Printing the help text
        print(helpTxt)

    # Checking if the second argument is not a help option.
    else:
        # Checking if the user entered a valid argument.
        if recurOpts[0] in argv or recurOpts[1] in argv or encOpts[0] in argv or encOpts[1] in argv or decOpts[0] in argv or decOpts[1] in argv:
            # Making sure the user is not entering same type of argument twice.
            if recurOpts[0] in argv and recurOpts[1] in argv:
                print(f'You can\'t enter same type of argument twice. Type obscuro {helpOpts[0]} to get more information.')
                exit()
            # Checking if the user entered a recursive option
            elif recurOpts[0] in argv or recurOpts[1] in argv:
                # Setting the recurise option choice to true.
                recurChoice = True
            # Checking if the user didn't enterd a resursive option
            else:
                # Setting the recurise option choice to false.
                recurChoice = False

            # Checking if the user entered an encryption feature option
            if encOpts[0] in argv or encOpts[1] in argv:
                # Creating a path from the last argument in the list of arguments
                targetP = Path(argv[-1])

                # Checking if the target path is exists.
                if targetP.exists() == True:
                    # Calling the encrypt function
                    encrypt(recurChoice, targetP)
                # Checking if the target path is not exists.
                else:
                    # Informing the user about what went wrong and what he/she should do to get more information.
                    print(f'You didn\'t entered a valid path. Type obscuro {helpOpts[0]} to see the help page.')

            # Checking if the user entered a decryption feature option.
            elif decOpts[0] in argv or decOpts[0] in argv:
                # Creating a target path from the last argument in the list of arguments
                targetP = Path(argv[-1])
                # Creating a key path variable from the argument which is one before the last argument in the list of arguments.
                keyP = Path(argv[len(argv)-2])

                # Checking if both target path and key path are exists.
                if targetP.exists() == True and keyP.exists() == True:
                    # Calling the decrypt function
                    decrypt(recurChoice, keyP, targetP)

                # Checking if target path or key path or both paths are not exists.
                else:
                    # Informing the user about what went wrong and he/she should do to get more information.
                    print(f'You didn\'t entered a valid path. Either key path or taget path isn\'t exist or both. Type obscuro {helpOpts[0]} to see the help page.')

            # Letting the user know that he/she didn't entered a valid argument. And, he/she should open the help page to get more information.
            else:
                print(f'You didn\'t entered a valid option. Type obscuro {helpOpts[0]} to see the help page.')


def encrypt(recurChoice, targetP):
    """A function that encrypts files"""
    debug(f'Recursive Choice = {recurChoice}')
    # Checking if the recurise choice is false.
    if recurChoice == False:
        # Checking if the target path is leading to a file.
        if path.isfile(targetP) == True:
            # Creating an encryption key
            key = Fernet.generate_key()
            # Printing the key content in debug mode.
            debug(f'Key Content = {key}')
            # Creating a file to store the key
            with open("the_key.key", "wb") as theKey: # wb -> write binary
                theKey.write(key)
            # Opening the target path in read binary mode
            with open(targetP, "rb") as theFile: # rb -> read binary
                # Reading the contents of the file(in binary mode)
                contents = theFile.read()
                # Encrypting the contents
                contentsEncrypted = Fernet(key).encrypt(contents)
                # Writing the encrypted contents back to a file
                with open(targetP, "wb") as theFile:
                    theFile.write(contentsEncrypted)
            # Printing what happened.
            print(f'File {targetP} is encrypted')

        # Checking if the target path is a directory.
        elif path.isdir(targetP) == True:
            # Generating an encryption key
            key = Fernet.generate_key()
            # Printing the key content in debug mode.
            debug(f'Key Content = {key}')
            # Opening a new file in write binary mode to store the key
            with open("the_key.key", "wb") as theKey: # wb -> write binary
                # Writing the key to a file
                theKey.write(key)
            # Iterating through each file in the target path
            for file in listdir(targetP):
                # Checking if file name is not obscuro or the_key.key
                if file == "obscuro" or file == "the_key.key":
                    # Skipping the files which are named obscuro and the_key.key
                    continue
                # Creating a target file path
                targetFP = Path(targetP, file)
                # Checking if the target file path is exists
                if path.isfile(targetFP) == True:
                    # Appending the target path to the list of target file paths.
                    listOfTargetFilPs.append(targetFP)

            # Iterating through each file path in the list of target file paths.
            for fileP in listOfTargetFilPs:
                # Opening the file in read binary mode
                with open(fileP, "rb") as theFile: # rb -> read binary
                    # Creating a variable to store it's contents.
                    contents = theFile.read()
                    # Encrypting the contents.
                    contentsEncrypted = Fernet(key).encrypt(contents)
                    # Opening the file in write binary mode.
                    with open(fileP, "wb") as theFile:
                        # Writing the encrypted contents into a file
                        theFile.write(contentsEncrypted)

            # Printing the list of encrypted files.
            print(f'List of encrypted files = {listOfTargetFilPs}')

        # Exiting the program is the target is not a file or a directory
        else:
            print("Target is not a file or a directory. Exiting the program...")
            exit()

    # Checking if the recursive choice is true
    else:
        # Checking if the target path is not exists.
        if path.isfile(targetP) == False:
            # Generating an encryption key
            key = Fernet.generate_key()
            # Printing the key's contents in debug mode.
            debug(f'Key Content = {key}')
            # Opening a new file in write binary mode to store the encryption key.
            with open("the_key.key", "wb") as theKey: # wb -> write binary
                # Writing the encryption key to a file
                theKey.write(key)
            # Iterating through each path, directory name and file name recursively starting from the target path.
            for currentPath, dir, file in walk(targetP):
                # Creating a folder path from the current path
                folder = Path(currentPath)
                # Appending the folder path to the list of target folder paths.
                listOfTargetFolPs.append(folder)

            # Iterating through each path in the list of target folder paths.
            for p in listOfTargetFolPs:
                # Iterating through each content in the folder(including files, folders and etc all together).
                for f in listdir(p):
                    # Creating a target path
                    target = Path(p,f)
                    # Checking if the target path is a file
                    if path.isfile(target) == True:
                        # Appending the file path to the list of target file paths.
                        listOfTargetFilPs.append(target)

            # Iterating through each target file path in the list of target file paths
            for tf in listOfTargetFilPs:
                # Opening the file in read binary mode
                with open(tf, "rb") as theFile: # rb -> read binary
                    # Creating a variable from the file contents
                    contents = theFile.read()
                    # Encrypting the contents using the encryption key.
                    contentsEncrypted = Fernet(key).encrypt(contents)
                    # Opening the file in write binary mode.
                    with open(tf, "wb") as theFile:
                        # Writing the encrypted content into the file
                        theFile.write(contentsEncrypted)

            # Printing the list of encrypted files.
            print(f'List of encrypted files = {listOfTargetFilPs}')

        # Letting the user know that he/she cannot use recursive option on files.
        else:
            print(f'You can\'t use recursive option on files.')

def decrypt(recurChoice, keyP, targetP):
    """A function that decrypts files"""
    debug(f'Recursive Choice = {recurChoice}')
    # Checking if the recursive option if false.
    if recurChoice == False:
        # Checking if the path is leading to a file
        if path.isfile(targetP) == True:
            # Opening the key file in read binary mode
            with open(keyP, "rb") as key:
                # Reading the contents of the file
                secretKey = key.read()
            # Opening the target file in read binary mode
            with open(targetP, "rb") as theFile: # rb -> read binary
                # Reading the contents of the file
                contents = theFile.read()
                # Decrypting the contents
                contentsDecrypted = Fernet(secretKey).decrypt(contents)
                # Opening the target file in write binary mode.
                with open(targetP, "wb") as theFile:
                    # Writing the decrypted content into the file
                    theFile.write(contentsDecrypted)

            # Printing what happened.
            print(f'File {targetP} is decrypted')

        # Checking if the target path is not a file
        elif path.isdir(targetP) == True:
            # Opening the key file in read binary mode
            with open(keyP, "rb") as key:
                # Reading the contents of the file
                secretKey = key.read()

            # Iterating through each file in the target path(Hint: It's identified that's not a file)
            for file in listdir(targetP):
                # Checking if the file name is obscuro or the_key.key
                if file == "obscuro" or file == "the_key.key":
                    # Skipping the files which are named as obscuro or the_key.key
                    continue
                # Creating a target file path
                targetFP = Path(targetP, file)
                # Checking if the target file path is a file
                if path.isfile(targetFP) == True:
                    # Appending the target file path to the list of target file paths.
                    listOfTargetFilPs.append(targetFP)
            # Iterating through each file in the list of target file paths.
            for file in listOfTargetFilPs:
                # Opening the file in read binary mode.
                with open(file, "rb") as theFile: # rb -> read binary
                    # Reading the contents of the file.
                    contents = theFile.read()
                    # Decrypting the contents
                    contentsDecrypted = Fernet(secretKey).decrypt(contents)
                    # Opening the file in write binary mode.
                    with open(file, "wb") as theFile:
                        # Writing the decrypted contents
                        theFile.write(contentsDecrypted)

            # Printing the list of decrypted files.
            print(f'List of decrypted files = {listOfTargetFilPs}')

        # Exiting the program if the target is not a file or a directory
        else:
            print("Target is not a file or a directory. Exiting the program...")
            exit()

    # Checking if recurise choice is false.
    else:
        # Checking if the target path is a directory.
        if path.isdir(targetP) == True:
            # Opening the file in read binary mode.
            with open(keyP, "rb") as key:
                # Reading the contents of the file.
                secretKey = key.read()
            # Iterating through the file system starting from the targetP for each current path, directory name and, file name.
            for currentPath, dir, file in walk(targetP):
                # Creating a folder path from the current path
                folder = Path(currentPath)
                # Appending the folder to the list of target folder paths.
                listOfTargetFolPs.append(folder)
            # Iterating through each folder path in the list of target folder paths.
            for p in listOfTargetFolPs:
                # Iterating through each file in each folder
                for f in listdir(p):
                    # Creating a target file path
                    targetFP = Path(p,f)
                    # Checking if the target file path is a file.
                    if path.isfile(targetFP) == True:
                        # Appending the target file path to the list of target file paths.
                        listOfTargetFilPs.append(targetFP)
            # Iterating through each target file path in the list of target file paths.
            for tf in listOfTargetFilPs:
                # Opening the target file path in read binary mode.
                with open(tf, "rb") as theFile: # rb -> read binary
                    # Reading the contents of the file.
                    contents = theFile.read()
                    # Decrypting the contents
                    contentsDecrypted = Fernet(secretKey).decrypt(contents)
                    # Opening the target file in write binary mode.
                    with open(tf, "wb") as theFile:
                        # Writing the decrypted contents to the file.
                        theFile.write(contentsDecrypted)
            # Printing the list of decrypted files.
            print(f'List of decrypted files = {listOfTargetFilPs}')

# Evaluate if the source is being run on its own or being imported somewhere else. With this conditional in place, your code can not be imported somewhere else.
if __name__ == '__main__':
    main()
